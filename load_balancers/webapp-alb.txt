resource "aws_alb" "mywebapp-alb" {  
  name            = "mywebapp-alb"  
  subnets         = ["${var.public_subnets_id}"]
  security_groups = ["${var.mywebapp_http_inbound_sg_id}"]
  internal        = "false" 
  idle_timeout    = 3  
  tags {    
    Name    = "mywebapp-alb"    
  }   
  access_logs {    
    bucket = "${var.elb_log_s3}"    
	enabled = true	
  }
}
output "mywebapp_alb_name" {
  value = "${aws_alb.mywebapp-alb.arn}"
}

resource "aws_alb_listener" "myalb_listener" {  
  load_balancer_arn = "${aws_alb.mywebapp-alb.arn}"  
  port              = 80  
  protocol          = "TCP"
  
  default_action {    
    target_group_arn = "${aws_alb_target_group.mywebappalb_target_group.arn}"
    type             = "forward"  
  }
}
resource "aws_alb_listener_rule" "listener_rule" {
  depends_on   = ["aws_alb_target_group.mywebappalb_target_group"]  
  listener_arn = "${aws_alb_listener.myalb_listener.arn}"  
  #priority     = "${var.priority}"   
  action {    
    type             = "forward"    
    target_group_arn = "${aws_alb_target_group.mywebappalb_target_group.id}"  
  }   
  condition {    
    field  = "path-pattern"    
    values = ["/"]
  }
}

resource "aws_alb_target_group" "mywebappalb_target_group" {  
  name     = "mywebappalb-target-group"  
  port     = 80
  protocol = "TCP"  
  vpc_id   = "${var.vpc_id}"   
  tags {    
    name = "mywebappalb-target-group"    
  }
  health_check {    
    healthy_threshold   = 3    
    unhealthy_threshold = 10    
    timeout             = 5    
    interval            = 10      
    port                = 80  
  }
}
